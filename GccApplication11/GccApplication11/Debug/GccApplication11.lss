
GccApplication11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800200  00800200  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dfb  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c85  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000469  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000651  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f3  00000000  00000000  00002ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c7 c0       	rjmp	.+398    	; 0x22c <__vector_39>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 36       	cpi	r26, 0x69	; 105
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0d d1       	rcall	.+538    	; 0x320 <main>
 106:	1e c1       	rjmp	.+572    	; 0x344 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z8i2c_initv>:
 uint16_t ri=0,rj=0;
 uint8_t status;
 volatile uint8_t* i2c_receive();
 void i2c_init(){
	 
	 TWAR =(8<<1); //initialized with slave address
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
	 TWCR|=(1<<TWEA)|(1<<TWEN)|(1<<TWIE); //interrupt enable
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	85 64       	ori	r24, 0x45	; 69
 118:	80 83       	st	Z, r24
	 PORTD |=(1<<PD0);
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	8b b9       	out	0x0b, r24	; 11
	 PORTD |=(1<<PD1); //pulling up sda and scl ;make port value 1 and direction bit 0
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	82 60       	ori	r24, 0x02	; 2
 124:	8b b9       	out	0x0b, r24	; 11
	 DDRD &=~(1<<PD0);
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	8a b9       	out	0x0a, r24	; 10
	 DDRD &=~(1<<PD1);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	8d 7f       	andi	r24, 0xFD	; 253
 130:	8a b9       	out	0x0a, r24	; 10
 132:	08 95       	ret

00000134 <_Z15initialize_uartv>:
	 
 }

void initialize_uart(){
	int ubrr= (int)floor(((F_CPU /(16UL*(BAUD)))-1)); //formula to cal ubrr
	UBRR0L = ubrr & 0xff;  //ubrrl is first 8 lower bits of ubrr
 134:	87 e6       	ldi	r24, 0x67	; 103
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H =  (ubrr >> 8); //ubrrl is first 4 higher bit numbers of ubrr
 13a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	
	UCSR0A &=  ~(1<<U2X0);   //2x speed is not used
 13e:	e0 ec       	ldi	r30, 0xC0	; 192
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); //ENABLING THE RECIEVER
 148:	a1 ec       	ldi	r26, 0xC1	; 193
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	8c 91       	ld	r24, X
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	8c 93       	st	X, r24
	UCSR0B |= (1<<TXEN0);  //ENABLING THE TRANSMITTER
 152:	8c 91       	ld	r24, X
 154:	88 60       	ori	r24, 0x08	; 8
 156:	8c 93       	st	X, r24
	UCSR0C |=(1<<UCSZ01)|(1<<UCSZ00);    //NOTE: FIRST ZERO FROM LEFT REPRESENT THE UART NUMBER LIKE 0,1,2,3
 158:	e2 ec       	ldi	r30, 0xC2	; 194
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	80 83       	st	Z, r24
	
	UCSR0B &= ~(1<<UCSZ02) ;  // 011 SET  8-bit mode
 162:	8c 91       	ld	r24, X
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	8c 93       	st	X, r24
	
	UCSR0C &= ~(1<<UMSEL01);    //  00 Setting it to asynchronous usart mode
 168:	80 81       	ld	r24, Z
 16a:	8f 77       	andi	r24, 0x7F	; 127
 16c:	80 83       	st	Z, r24
	UCSR0C &=   ~(1<<UMSEL00);
 16e:	80 81       	ld	r24, Z
 170:	8f 7b       	andi	r24, 0xBF	; 191
 172:	80 83       	st	Z, r24
	
	UCSR0C &= ~(1<<UPM01) ;
 174:	80 81       	ld	r24, Z
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UPM00);   // 00 MAKES THE PARITY DISABLED
 17a:	80 81       	ld	r24, Z
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	80 83       	st	Z, r24
	
	UCSR0C  &= ~(1<<USBS0);  // NUMBER OF STOP BITS IS 1
 180:	80 81       	ld	r24, Z
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	80 83       	st	Z, r24
	UCSR0C  &=~(1<<UCPOL0);  //RISING CLK- TRANSMITTING   FALLING CLK- RECEIVED;
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <_Z9read_buffv>:
	TWCR |=(1<<TWINT); //as interrupt is handled by the ISR the TWINT should be cleared by software
	//read_buff();
}

void read_buff(){
	if(ri!=rj){
 18e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ri>
 192:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ri+0x1>
 196:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <rj>
 19a:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <rj+0x1>
 19e:	82 17       	cp	r24, r18
 1a0:	93 07       	cpc	r25, r19
 1a2:	39 f1       	breq	.+78     	; 0x1f2 <_Z9read_buffv+0x64>
		
		UDR0 = (char) rec_arr[ri];   //data
 1a4:	fc 01       	movw	r30, r24
 1a6:	eb 5f       	subi	r30, 0xFB	; 251
 1a8:	fd 4f       	sbci	r31, 0xFD	; 253
 1aa:	80 81       	ld	r24, Z
 1ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		while(!(UCSR0A>>5 & 0X01));
 1b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1b4:	85 ff       	sbrs	r24, 5
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <_Z9read_buffv+0x22>
		ri++;
 1b8:	40 91 03 02 	lds	r20, 0x0203	; 0x800203 <ri>
 1bc:	50 91 04 02 	lds	r21, 0x0204	; 0x800204 <ri+0x1>
 1c0:	4f 5f       	subi	r20, 0xFF	; 255
 1c2:	5f 4f       	sbci	r21, 0xFF	; 255
		ri=ri%N;
 1c4:	9a 01       	movw	r18, r20
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	36 95       	lsr	r19
 1cc:	27 95       	ror	r18
 1ce:	ab e7       	ldi	r26, 0x7B	; 123
 1d0:	b4 e1       	ldi	r27, 0x14	; 20
 1d2:	a9 d0       	rcall	.+338    	; 0x326 <__umulhisi3>
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	64 e6       	ldi	r22, 0x64	; 100
 1da:	68 9f       	mul	r22, r24
 1dc:	90 01       	movw	r18, r0
 1de:	69 9f       	mul	r22, r25
 1e0:	30 0d       	add	r19, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	ca 01       	movw	r24, r20
 1e6:	82 1b       	sub	r24, r18
 1e8:	93 0b       	sbc	r25, r19
 1ea:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ri+0x1>
 1ee:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ri>
 1f2:	08 95       	ret

000001f4 <_Z11i2c_receivev>:
	}
}


volatile uint8_t* i2c_receive() {
	status = TWSR & 0xf8;
 1f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1f8:	88 7f       	andi	r24, 0xF8	; 248
 1fa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	//Serial.println(status, HEX);
	if (status == 0x80 || status == 0x90) {
 1fe:	80 38       	cpi	r24, 0x80	; 128
 200:	49 f0       	breq	.+18     	; 0x214 <_Z11i2c_receivev+0x20>
 202:	80 39       	cpi	r24, 0x90	; 144
 204:	51 f0       	breq	.+20     	; 0x21a <_Z11i2c_receivev+0x26>
		//refer the data sheet for the status
		return (&TWDR);
	}
	else if (status == 0x88 || status == 0x98) {
 206:	88 38       	cpi	r24, 0x88	; 136
 208:	59 f0       	breq	.+22     	; 0x220 <_Z11i2c_receivev+0x2c>
 20a:	88 39       	cpi	r24, 0x98	; 152
 20c:	61 f4       	brne	.+24     	; 0x226 <_Z11i2c_receivev+0x32>
		return (&TWDR);
 20e:	8b eb       	ldi	r24, 0xBB	; 187
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	08 95       	ret
volatile uint8_t* i2c_receive() {
	status = TWSR & 0xf8;
	//Serial.println(status, HEX);
	if (status == 0x80 || status == 0x90) {
		//refer the data sheet for the status
		return (&TWDR);
 214:	8b eb       	ldi	r24, 0xBB	; 187
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret
 21a:	8b eb       	ldi	r24, 0xBB	; 187
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret
	}
	else if (status == 0x88 || status == 0x98) {
		return (&TWDR);
 220:	8b eb       	ldi	r24, 0xBB	; 187
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret
	}
	
	else return (volatile uint8_t)NULL;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
}
 22a:	08 95       	ret

0000022c <__vector_39>:
	
}



ISR(TWI_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	0b b6       	in	r0, 0x3b	; 59
 238:	0f 92       	push	r0
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	volatile uint8_t *temp = i2c_receive();
 252:	d0 df       	rcall	.-96     	; 0x1f4 <_Z11i2c_receivev>
	if(temp != NULL)
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	09 f4       	brne	.+2      	; 0x25a <__vector_39+0x2e>
 258:	47 c0       	rjmp	.+142    	; 0x2e8 <__vector_39+0xbc>
	{
		rec_arr[rj++] =(uint8_t) *temp;
 25a:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <rj>
 25e:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <rj+0x1>
 262:	a9 01       	movw	r20, r18
 264:	4f 5f       	subi	r20, 0xFF	; 255
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <rj+0x1>
 26c:	40 93 01 02 	sts	0x0201, r20	; 0x800201 <rj>
 270:	fc 01       	movw	r30, r24
 272:	80 81       	ld	r24, Z
 274:	f9 01       	movw	r30, r18
 276:	eb 5f       	subi	r30, 0xFB	; 251
 278:	fd 4f       	sbci	r31, 0xFD	; 253
 27a:	80 83       	st	Z, r24
		rj = rj%N;
 27c:	9a 01       	movw	r18, r20
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	36 95       	lsr	r19
 284:	27 95       	ror	r18
 286:	ab e7       	ldi	r26, 0x7B	; 123
 288:	b4 e1       	ldi	r27, 0x14	; 20
 28a:	4d d0       	rcall	.+154    	; 0x326 <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	64 e6       	ldi	r22, 0x64	; 100
 292:	68 9f       	mul	r22, r24
 294:	90 01       	movw	r18, r0
 296:	69 9f       	mul	r22, r25
 298:	30 0d       	add	r19, r0
 29a:	11 24       	eor	r1, r1
 29c:	ca 01       	movw	r24, r20
 29e:	82 1b       	sub	r24, r18
 2a0:	93 0b       	sbc	r25, r19
 2a2:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <rj+0x1>
 2a6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <rj>
		if(ri==rj){
 2aa:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <ri>
 2ae:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <ri+0x1>
 2b2:	82 17       	cp	r24, r18
 2b4:	93 07       	cpc	r25, r19
 2b6:	c1 f4       	brne	.+48     	; 0x2e8 <__vector_39+0xbc>
			ri++;
 2b8:	a9 01       	movw	r20, r18
 2ba:	4f 5f       	subi	r20, 0xFF	; 255
 2bc:	5f 4f       	sbci	r21, 0xFF	; 255
			ri=ri%N;
 2be:	9a 01       	movw	r18, r20
 2c0:	36 95       	lsr	r19
 2c2:	27 95       	ror	r18
 2c4:	36 95       	lsr	r19
 2c6:	27 95       	ror	r18
 2c8:	2e d0       	rcall	.+92     	; 0x326 <__umulhisi3>
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	64 e6       	ldi	r22, 0x64	; 100
 2d0:	68 9f       	mul	r22, r24
 2d2:	90 01       	movw	r18, r0
 2d4:	69 9f       	mul	r22, r25
 2d6:	30 0d       	add	r19, r0
 2d8:	11 24       	eor	r1, r1
 2da:	ca 01       	movw	r24, r20
 2dc:	82 1b       	sub	r24, r18
 2de:	93 0b       	sbc	r25, r19
 2e0:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ri+0x1>
 2e4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ri>
			
		}
	}
	TWCR |=(1<<TWINT); //as interrupt is handled by the ISR the TWINT should be cleared by software
 2e8:	ec eb       	ldi	r30, 0xBC	; 188
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
	//read_buff();
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0b be       	out	0x3b, r0	; 59
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <_Z20initialize_spi_slavev>:
	
	else return (volatile uint8_t)NULL;
}

void initialize_spi_slave(){
	sei();
 318:	78 94       	sei
	i2c_init();
 31a:	f7 de       	rcall	.-530    	; 0x10a <_Z8i2c_initv>
	initialize_uart();
 31c:	0b cf       	rjmp	.-490    	; 0x134 <_Z15initialize_uartv>
 31e:	08 95       	ret

00000320 <main>:

	 
#include "i2c_slave_header.h"	 

int main(){
	initialize_spi_slave();
 320:	fb df       	rcall	.-10     	; 0x318 <_Z20initialize_spi_slavev>
	while(1){
			  read_buff();
 322:	35 df       	rcall	.-406    	; 0x18e <_Z9read_buffv>
 324:	fe cf       	rjmp	.-4      	; 0x322 <main+0x2>

00000326 <__umulhisi3>:
 326:	a2 9f       	mul	r26, r18
 328:	b0 01       	movw	r22, r0
 32a:	b3 9f       	mul	r27, r19
 32c:	c0 01       	movw	r24, r0
 32e:	a3 9f       	mul	r26, r19
 330:	70 0d       	add	r23, r0
 332:	81 1d       	adc	r24, r1
 334:	11 24       	eor	r1, r1
 336:	91 1d       	adc	r25, r1
 338:	b2 9f       	mul	r27, r18
 33a:	70 0d       	add	r23, r0
 33c:	81 1d       	adc	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	91 1d       	adc	r25, r1
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
