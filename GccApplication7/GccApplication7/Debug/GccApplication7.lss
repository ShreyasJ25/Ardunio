
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800200  00800200  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9c  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d9  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00002841  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	71 c0       	rjmp	.+226    	; 0x148 <__vector_25>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 36       	cpi	r26, 0x68	; 104
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	ad d0       	rcall	.+346    	; 0x260 <main>
 106:	be c0       	rjmp	.+380    	; 0x284 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z9read_buffv>:
	read_buff();
}
		
void read_buff(){
	
	if(ri!=rj){
 10a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <ri>
 10e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <ri+0x1>
 112:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 116:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 11a:	28 17       	cp	r18, r24
 11c:	39 07       	cpc	r19, r25
 11e:	99 f0       	breq	.+38     	; 0x146 <_Z9read_buffv+0x3c>
	while(!(UCSR0A>>5 & 0X01));
 120:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 124:	85 ff       	sbrs	r24, 5
 126:	fc cf       	rjmp	.-8      	; 0x120 <_Z9read_buffv+0x16>
	UDR0 = (uint8_t) rec_arr[ri];   //data
 128:	f9 01       	movw	r30, r18
 12a:	ec 5f       	subi	r30, 0xFC	; 252
 12c:	fd 4f       	sbci	r31, 0xFD	; 253
 12e:	80 81       	ld	r24, Z
 130:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	ri++;
 134:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ri>
 138:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ri+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ri+0x1>
 142:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ri>
 146:	08 95       	ret

00000148 <__vector_25>:
#include "uart_buffer_header.h"
uint8_t rec_arr[N];
uint16_t ri=0,rj=0;
void read_buff();

ISR(USART0_RX_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0b b6       	in	r0, 0x3b	; 59
 154:	0f 92       	push	r0
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	//cli();
	//UCSR0B &= ~(1<<RXCIE0);
	rec_arr[rj++]= UDR0;
 16e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 172:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 176:	ac 01       	movw	r20, r24
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 180:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 184:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 188:	fc 01       	movw	r30, r24
 18a:	ec 5f       	subi	r30, 0xFC	; 252
 18c:	fd 4f       	sbci	r31, 0xFD	; 253
 18e:	20 83       	st	Z, r18
	rj = rj%N;
 190:	9a 01       	movw	r18, r20
 192:	36 95       	lsr	r19
 194:	27 95       	ror	r18
 196:	36 95       	lsr	r19
 198:	27 95       	ror	r18
 19a:	ab e7       	ldi	r26, 0x7B	; 123
 19c:	b4 e1       	ldi	r27, 0x14	; 20
 19e:	63 d0       	rcall	.+198    	; 0x266 <__umulhisi3>
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	64 e6       	ldi	r22, 0x64	; 100
 1a6:	68 9f       	mul	r22, r24
 1a8:	90 01       	movw	r18, r0
 1aa:	69 9f       	mul	r22, r25
 1ac:	30 0d       	add	r19, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	ca 01       	movw	r24, r20
 1b2:	82 1b       	sub	r24, r18
 1b4:	93 0b       	sbc	r25, r19
 1b6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1ba:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	if(rj==ri)ri++;
 1be:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <ri>
 1c2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <ri+0x1>
 1c6:	82 17       	cp	r24, r18
 1c8:	93 07       	cpc	r25, r19
 1ca:	31 f4       	brne	.+12     	; 0x1d8 <__vector_25+0x90>
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <ri+0x1>
 1d4:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <ri>
	
	read_buff();
 1d8:	98 df       	rcall	.-208    	; 0x10a <_Z9read_buffv>
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0b be       	out	0x3b, r0	; 59
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <_Z10initializev>:

void initialize(){
	int ubrr= (int)floor(((F_CPU /(16UL*(BAUD)))-1)); //formula to cal ubrr
	
	
	UBRR0L = ubrr & 0xff;  //ubrrl is first 8 lower bits of ubrr
 200:	87 e6       	ldi	r24, 0x67	; 103
 202:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H =  (ubrr >> 8); //ubrrl is first 4 higher bit numbers of ubrr
 206:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	
	UCSR0A &=  ~(1<<U2X0);   //2x speed is not used
 20a:	e0 ec       	ldi	r30, 0xC0	; 192
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); //ENABLING THE RECIEVER
 214:	a1 ec       	ldi	r26, 0xC1	; 193
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	8c 91       	ld	r24, X
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	8c 93       	st	X, r24
	UCSR0B |= (1<<TXEN0);  //ENABLING THE TRANSMITTER
 21e:	8c 91       	ld	r24, X
 220:	88 60       	ori	r24, 0x08	; 8
 222:	8c 93       	st	X, r24
	UCSR0C |=(1<<UCSZ01)|(1<<UCSZ00);    //NOTE: FIRST ZERO FROM LEFT REPRESENT THE UART NUMBER LIKE 0,1,2,3
 224:	e2 ec       	ldi	r30, 0xC2	; 194
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	86 60       	ori	r24, 0x06	; 6
 22c:	80 83       	st	Z, r24
	
	UCSR0B &= ~(1<<UCSZ02) ;  // 011 SET  8-bit mode
 22e:	8c 91       	ld	r24, X
 230:	8b 7f       	andi	r24, 0xFB	; 251
 232:	8c 93       	st	X, r24
	
	UCSR0C &= ~(1<<UMSEL01);    //  00 Setting it to asynchronous usart mode
 234:	80 81       	ld	r24, Z
 236:	8f 77       	andi	r24, 0x7F	; 127
 238:	80 83       	st	Z, r24
	UCSR0C &=   ~(1<<UMSEL00);
 23a:	80 81       	ld	r24, Z
 23c:	8f 7b       	andi	r24, 0xBF	; 191
 23e:	80 83       	st	Z, r24
	
	UCSR0C &= ~(1<<UPM01) ;
 240:	80 81       	ld	r24, Z
 242:	8f 7d       	andi	r24, 0xDF	; 223
 244:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UPM00);   // 00 MAKES THE PARITY DISABLED
 246:	80 81       	ld	r24, Z
 248:	8f 7e       	andi	r24, 0xEF	; 239
 24a:	80 83       	st	Z, r24
	
	UCSR0C  &= ~(1<<USBS0);  // NUMBER OF STOP BITS IS 1
 24c:	80 81       	ld	r24, Z
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	80 83       	st	Z, r24
	UCSR0C  &=~(1<<UCPOL0);  //RISING CLK- TRANSMITTING   FALLING CLK- RECEIVED;
 252:	80 81       	ld	r24, Z
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	80 83       	st	Z, r24
	
	
	//UCSR0B |=(1<<TXCIE0);    //ENABLING TRANSMITTING INTERUPT
	UCSR0B |=(1<<RXCIE0);
 258:	8c 91       	ld	r24, X
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	8c 93       	st	X, r24
 25e:	08 95       	ret

00000260 <main>:
#include "uart_buffer_header.h"
int main(void)
{   
	sei();
 260:	78 94       	sei
	initialize();
 262:	ce df       	rcall	.-100    	; 0x200 <_Z10initializev>
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x4>

00000266 <__umulhisi3>:
 266:	a2 9f       	mul	r26, r18
 268:	b0 01       	movw	r22, r0
 26a:	b3 9f       	mul	r27, r19
 26c:	c0 01       	movw	r24, r0
 26e:	a3 9f       	mul	r26, r19
 270:	70 0d       	add	r23, r0
 272:	81 1d       	adc	r24, r1
 274:	11 24       	eor	r1, r1
 276:	91 1d       	adc	r25, r1
 278:	b2 9f       	mul	r27, r18
 27a:	70 0d       	add	r23, r0
 27c:	81 1d       	adc	r24, r1
 27e:	11 24       	eor	r1, r1
 280:	91 1d       	adc	r25, r1
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
