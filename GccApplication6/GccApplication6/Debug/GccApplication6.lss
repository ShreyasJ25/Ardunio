
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8e  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd3  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043f  00000000  00000000  00001fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bb  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002d07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	d8 d0       	rcall	.+432    	; 0x2b6 <main>
 106:	06 c1       	rjmp	.+524    	; 0x314 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_29>:

#include "source_header.h"
void (*interrupt_func)(void);

ISR(ADC_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	interrupt_func();
 130:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 134:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 138:	19 95       	eicall
	
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0b be       	out	0x3b, r0	; 59
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_Z14initialize_adcv>:

void initialize_adc(){
	//ADMUX |=(1<<REFS1)|(1<<REFS0);   //2.56V INTERRNAL REFERENCE VOLTAGE
	ADMUX &= ~(1<<REFS1);
 160:	ec e7       	ldi	r30, 0x7C	; 124
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8f 77       	andi	r24, 0x7F	; 127
 168:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS0);  //AREF CONNECTION EXTERNAL
 16a:	80 81       	ld	r24, Z
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	80 83       	st	Z, r24
	ADCSRB &=~(1<<MUX5);
 170:	ab e7       	ldi	r26, 0x7B	; 123
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	8c 91       	ld	r24, X
 176:	87 7f       	andi	r24, 0xF7	; 247
 178:	8c 93       	st	X, r24
	ADMUX &=~(1<<MUX4);
 17a:	80 81       	ld	r24, Z
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	80 83       	st	Z, r24
	ADMUX &=~(1<<MUX3);
 180:	80 81       	ld	r24, Z
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	80 83       	st	Z, r24
	ADMUX &=~(1<<MUX2);
 186:	80 81       	ld	r24, Z
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	80 83       	st	Z, r24
	ADMUX &=~(1<<MUX1);
 18c:	80 81       	ld	r24, Z
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	80 83       	st	Z, r24
	ADMUX &=~(1<<MUX0);// taking input from adc0
 192:	80 81       	ld	r24, Z
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADEN);  //WRITING 1 ENABLES ADC
 198:	ea e7       	ldi	r30, 0x7A	; 122
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADPS1)||(1<<ADPS0); //PRE-SCALAR SET TO 1
 1a2:	80 81       	ld	r24, Z
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	80 83       	st	Z, r24
	
	ADCSRA |=(1<<ADIE);  // enabling the interrupt ADC Interrupt
 1a8:	80 81       	ld	r24, Z
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <_Z15initialize_uartv>:

void initialize_uart(){
	
	int ubrr= (int)floor(((F_CPU /(16UL*(BAUD)))-1)); //formula to cal ubrr
	
	UBRR0L = ubrr & 0xff;  //ubrrl is first 8 lower bits of ubrr
 1b0:	87 e6       	ldi	r24, 0x67	; 103
 1b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H =  (ubrr >> 8); //ubrrl is first 4 higher bit numbers of ubrr
 1b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	
	UCSR0A &=  ~(1<<U2X0);   //2x speed is not used
 1ba:	e0 ec       	ldi	r30, 0xC0	; 192
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8d 7f       	andi	r24, 0xFD	; 253
 1c2:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); //ENABLING THE RECIEVER
 1c4:	a1 ec       	ldi	r26, 0xC1	; 193
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	8c 91       	ld	r24, X
 1ca:	80 61       	ori	r24, 0x10	; 16
 1cc:	8c 93       	st	X, r24
	UCSR0B |= (1<<TXEN0);  //ENABLING THE TRANSMITTER
 1ce:	8c 91       	ld	r24, X
 1d0:	88 60       	ori	r24, 0x08	; 8
 1d2:	8c 93       	st	X, r24
	UCSR0C |=(1<<UCSZ01)|(1<<UCSZ00);    //NOTE: FIRST ZERO FROM LEFT REPRESENT THE UART NUMBER LIKE 0,1,2,3
 1d4:	e2 ec       	ldi	r30, 0xC2	; 194
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	86 60       	ori	r24, 0x06	; 6
 1dc:	80 83       	st	Z, r24
	
	UCSR0B &= ~(1<<UCSZ02) ;  // 011 SET  8-bit mode
 1de:	8c 91       	ld	r24, X
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	8c 93       	st	X, r24
	
	UCSR0C &= ~(1<<UMSEL01);    //  00 Setting it to asynchronous usart mode
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 77       	andi	r24, 0x7F	; 127
 1e8:	80 83       	st	Z, r24
	UCSR0C &=   ~(1<<UMSEL00);
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 7b       	andi	r24, 0xBF	; 191
 1ee:	80 83       	st	Z, r24
	
	UCSR0C &= ~(1<<UPM01) ;
 1f0:	80 81       	ld	r24, Z
 1f2:	8f 7d       	andi	r24, 0xDF	; 223
 1f4:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UPM00);   // 00 MAKES THE PARITY DISABLED
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	80 83       	st	Z, r24
	
	UCSR0C  &= ~(1<<USBS0);  // NUMBER OF STOP BITS IS 1
 1fc:	80 81       	ld	r24, Z
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	80 83       	st	Z, r24
	UCSR0C  &=~(1<<UCPOL0);  //RISING CLK- TRANSMITTING   FALLING CLK- RECEIVED;
 202:	80 81       	ld	r24, Z
 204:	8e 7f       	andi	r24, 0xFE	; 254
 206:	80 83       	st	Z, r24
 208:	08 95       	ret

0000020a <_Z21enable_adc_convertionv>:
	
	}

void enable_adc_convertion(void){
	ADCSRA|=(1<<ADSC);
 20a:	ea e7       	ldi	r30, 0x7A	; 122
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
 214:	08 95       	ret

00000216 <_Z20attach_adc_interruptPFvvE>:
}

void attach_adc_interrupt(void (*func)()){
	
	interrupt_func =func;
 216:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 21a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 21e:	08 95       	ret

00000220 <_Z4taskv>:
#include <avr/io.h>

#include "source_header.h"
using namespace std;

void task(){
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <_Z4taskv+0x6>
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	
	cli();  //disabling the interrrupt
 22c:	f8 94       	cli
	int num =ADC;
 22e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 232:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	int num1=num,num2=0;
	char arr[4];
	for(int j=0;j<4;j++){
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	31 05       	cpc	r19, r1
 23e:	c4 f4       	brge	.+48     	; 0x270 <_Z4taskv+0x50>
		num1=num/10;
 240:	cf 01       	movw	r24, r30
 242:	6a e0       	ldi	r22, 0x0A	; 10
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	3f d0       	rcall	.+126    	; 0x2c6 <__divmodhi4>
		num2 =num - num1*10;
 248:	46 ef       	ldi	r20, 0xF6	; 246
 24a:	46 03       	mulsu	r20, r22
 24c:	c0 01       	movw	r24, r0
 24e:	47 9f       	mul	r20, r23
 250:	90 0d       	add	r25, r0
 252:	11 24       	eor	r1, r1
 254:	8e 0f       	add	r24, r30
 256:	9f 1f       	adc	r25, r31
		arr[j] = num2 + '0';
 258:	e1 e0       	ldi	r30, 0x01	; 1
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	e2 0f       	add	r30, r18
 262:	f3 1f       	adc	r31, r19
 264:	80 5d       	subi	r24, 0xD0	; 208
 266:	80 83       	st	Z, r24
	
	cli();  //disabling the interrrupt
	int num =ADC;
	int num1=num,num2=0;
	char arr[4];
	for(int j=0;j<4;j++){
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
		num1=num/10;
		num2 =num - num1*10;
		arr[j] = num2 + '0';
		num =num1;
 26c:	fb 01       	movw	r30, r22
	
	cli();  //disabling the interrrupt
	int num =ADC;
	int num1=num,num2=0;
	char arr[4];
	for(int j=0;j<4;j++){
 26e:	e5 cf       	rjmp	.-54     	; 0x23a <_Z4taskv+0x1a>
 270:	23 e0       	ldi	r18, 0x03	; 3
 272:	30 e0       	ldi	r19, 0x00	; 0
		num2 =num - num1*10;
		arr[j] = num2 + '0';
		num =num1;
}

	for(int j=3;j>=0;j--){
 274:	33 23       	and	r19, r19
 276:	84 f0       	brlt	.+32     	; 0x298 <_Z4taskv+0x78>
				while(!(UCSR0A>>5 & 0x01));
 278:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 27c:	85 ff       	sbrs	r24, 5
 27e:	fc cf       	rjmp	.-8      	; 0x278 <_Z4taskv+0x58>
				UDR0 =arr[j];
 280:	e1 e0       	ldi	r30, 0x01	; 1
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	e2 0f       	add	r30, r18
 28a:	f3 1f       	adc	r31, r19
 28c:	80 81       	ld	r24, Z
 28e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		num2 =num - num1*10;
		arr[j] = num2 + '0';
		num =num1;
}

	for(int j=3;j>=0;j--){
 292:	21 50       	subi	r18, 0x01	; 1
 294:	31 09       	sbc	r19, r1
 296:	ee cf       	rjmp	.-36     	; 0x274 <_Z4taskv+0x54>
				while(!(UCSR0A>>5 & 0x01));
				UDR0 =arr[j];
	}
	while(!(UCSR0A>>5 & 0x01));
 298:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 29c:	85 ff       	sbrs	r24, 5
 29e:	fc cf       	rjmp	.-8      	; 0x298 <_Z4taskv+0x78>
	UDR0 ='\n';
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	
	sei();  //enabling interrupt only after conversion
 2a6:	78 94       	sei
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <main>:



int main(void)
{
	sei();
 2b6:	78 94       	sei
	initialize_uart();
 2b8:	7b df       	rcall	.-266    	; 0x1b0 <_Z15initialize_uartv>
	initialize_adc();
 2ba:	52 df       	rcall	.-348    	; 0x160 <_Z14initialize_adcv>
 2bc:	80 e1       	ldi	r24, 0x10	; 16
	attach_adc_interrupt(&task);
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	aa df       	rcall	.-172    	; 0x216 <_Z20attach_adc_interruptPFvvE>
	enable_adc_convertion();
 2c2:	a3 df       	rcall	.-186    	; 0x20a <_Z21enable_adc_convertionv>
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <main+0xe>

000002c6 <__divmodhi4>:
 2c6:	97 fb       	bst	r25, 7
 2c8:	07 2e       	mov	r0, r23
 2ca:	16 f4       	brtc	.+4      	; 0x2d0 <__divmodhi4+0xa>
 2cc:	00 94       	com	r0
 2ce:	06 d0       	rcall	.+12     	; 0x2dc <__divmodhi4_neg1>
 2d0:	77 fd       	sbrc	r23, 7
 2d2:	08 d0       	rcall	.+16     	; 0x2e4 <__divmodhi4_neg2>
 2d4:	0b d0       	rcall	.+22     	; 0x2ec <__udivmodhi4>
 2d6:	07 fc       	sbrc	r0, 7
 2d8:	05 d0       	rcall	.+10     	; 0x2e4 <__divmodhi4_neg2>
 2da:	3e f4       	brtc	.+14     	; 0x2ea <__divmodhi4_exit>

000002dc <__divmodhi4_neg1>:
 2dc:	90 95       	com	r25
 2de:	81 95       	neg	r24
 2e0:	9f 4f       	sbci	r25, 0xFF	; 255
 2e2:	08 95       	ret

000002e4 <__divmodhi4_neg2>:
 2e4:	70 95       	com	r23
 2e6:	61 95       	neg	r22
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255

000002ea <__divmodhi4_exit>:
 2ea:	08 95       	ret

000002ec <__udivmodhi4>:
 2ec:	aa 1b       	sub	r26, r26
 2ee:	bb 1b       	sub	r27, r27
 2f0:	51 e1       	ldi	r21, 0x11	; 17
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <__udivmodhi4_ep>

000002f4 <__udivmodhi4_loop>:
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	a6 17       	cp	r26, r22
 2fa:	b7 07       	cpc	r27, r23
 2fc:	10 f0       	brcs	.+4      	; 0x302 <__udivmodhi4_ep>
 2fe:	a6 1b       	sub	r26, r22
 300:	b7 0b       	sbc	r27, r23

00000302 <__udivmodhi4_ep>:
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	5a 95       	dec	r21
 308:	a9 f7       	brne	.-22     	; 0x2f4 <__udivmodhi4_loop>
 30a:	80 95       	com	r24
 30c:	90 95       	com	r25
 30e:	bc 01       	movw	r22, r24
 310:	cd 01       	movw	r24, r26
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
