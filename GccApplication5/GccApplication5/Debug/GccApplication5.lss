
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800208  00800208  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5d  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4d  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000536  00000000  00000000  0000217e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006aa  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ab  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a4 c0       	rjmp	.+328    	; 0x1b6 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	10 d1       	rcall	.+544    	; 0x340 <main>
 120:	18 c1       	rjmp	.+560    	; 0x352 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
#include "UART_no_buffer.h"

void (*f1)(void);
void (*f2)(void);

ISR(USART0_RX_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	0b b6       	in	r0, 0x3b	; 59
 130:	0f 92       	push	r0
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31

	UCSR0B &= ~(1<<RXCIE0);
 14e:	c1 ec       	ldi	r28, 0xC1	; 193
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	88 81       	ld	r24, Y
 154:	8f 77       	andi	r24, 0x7F	; 127
 156:	88 83       	st	Y, r24
	DDRB |=0b10000000;
 158:	84 b1       	in	r24, 0x04	; 4
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	84 b9       	out	0x04, r24	; 4
	PORTB &=0b01111111;
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8f 77       	andi	r24, 0x7F	; 127
 162:	85 b9       	out	0x05, r24	; 5
	
	f1();
 164:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <f1>
 168:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <f1+0x1>
 16c:	19 95       	eicall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	83 ed       	ldi	r24, 0xD3	; 211
 172:	90 e3       	ldi	r25, 0x30	; 48
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <__vector_25+0x50>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <__vector_25+0x5a>
 17e:	00 00       	nop
	
	_delay_ms(1000);
	PORTB |=0b10000000;
 180:	85 b1       	in	r24, 0x05	; 5
 182:	80 68       	ori	r24, 0x80	; 128
 184:	85 b9       	out	0x05, r24	; 5
	UCSR0B |= (1<<RXCIE0);
 186:	88 81       	ld	r24, Y
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	88 83       	st	Y, r24
	
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_27>:



ISR(USART0_TX_vect){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	0b b6       	in	r0, 0x3b	; 59
 1c2:	0f 92       	push	r0
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	
	UCSR0B &= ~(1<<TXCIE0);
 1dc:	e1 ec       	ldi	r30, 0xC1	; 193
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7b       	andi	r24, 0xBF	; 191
 1e4:	80 83       	st	Z, r24
	DDRB |=0b10000000;
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	84 b9       	out	0x04, r24	; 4
	PORTB &=0b01111111;
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	8f 77       	andi	r24, 0x7F	; 127
 1f0:	85 b9       	out	0x05, r24	; 5
	while(!(UCSR0A>>5 & 0x01));
 1f2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1f6:	85 ff       	sbrs	r24, 5
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <__vector_27+0x3c>
	UDR0 = (uint8_t)'\n';
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	87 ea       	ldi	r24, 0xA7	; 167
 204:	91 e6       	ldi	r25, 0x61	; 97
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <__vector_27+0x50>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__vector_27+0x5a>
 210:	00 00       	nop
	_delay_ms(2000);
	
	f2();
 212:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_end>
 216:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__data_end+0x1>
 21a:	19 95       	eicall
	
	PORTB |=0b10000000;
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	85 b9       	out	0x05, r24	; 5
	UCSR0B |= (1<<TXCIE0);
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24

}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0b be       	out	0x3b, r0	; 59
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <_Z19attach_int_recieverPFvvE>:

void attach_int_reciever(void (*fun1)()){
	f1 =fun1;
 252:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <f1+0x1>
 256:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <f1>
 25a:	08 95       	ret

0000025c <_Z22attach_int_transmitterPFvvE>:
}

void attach_int_transmitter(void (*fun2)()){
	f2=fun2;
 25c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 260:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 264:	08 95       	ret

00000266 <_Z10initializev>:

void initialize(){
	int ubrr= (int)floor(((F_CPU /(16UL*(BAUD)))-1)); //formula to cal ubrr
	
	
	UBRR0L = ubrr & 0xff;  //ubrrl is first 8 lower bits of ubrr
 266:	87 e6       	ldi	r24, 0x67	; 103
 268:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H =  (ubrr >> 8); //ubrrl is first 4 higher bit numbers of ubrr
 26c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	
	UCSR0A &=  ~(1<<U2X0);   //2x speed is not used
 270:	e0 ec       	ldi	r30, 0xC0	; 192
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); //ENABLING THE RECIEVER
 27a:	a1 ec       	ldi	r26, 0xC1	; 193
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	8c 91       	ld	r24, X
 280:	80 61       	ori	r24, 0x10	; 16
 282:	8c 93       	st	X, r24
	UCSR0B |= (1<<TXEN0);  //ENABLING THE TRANSMITTER
 284:	8c 91       	ld	r24, X
 286:	88 60       	ori	r24, 0x08	; 8
 288:	8c 93       	st	X, r24
	UCSR0C |=(1<<UCSZ01)|(1<<UCSZ00);    //NOTE: FIRST ZERO FROM LEFT REPRESENT THE UART NUMBER LIKE 0,1,2,3
 28a:	e2 ec       	ldi	r30, 0xC2	; 194
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	86 60       	ori	r24, 0x06	; 6
 292:	80 83       	st	Z, r24
	
	UCSR0B &= ~(1<<UCSZ02) ;  // 011 SET  8-bit mode
 294:	8c 91       	ld	r24, X
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	8c 93       	st	X, r24
	
	UCSR0C &= ~(1<<UMSEL01);    //  00 Setting it to asynchronous usart mode
 29a:	80 81       	ld	r24, Z
 29c:	8f 77       	andi	r24, 0x7F	; 127
 29e:	80 83       	st	Z, r24
	UCSR0C &=   ~(1<<UMSEL00);
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 7b       	andi	r24, 0xBF	; 191
 2a4:	80 83       	st	Z, r24
	
	UCSR0C &= ~(1<<UPM01) ;
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 7d       	andi	r24, 0xDF	; 223
 2aa:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UPM00);   // 00 MAKES THE PARITY DISABLED
 2ac:	80 81       	ld	r24, Z
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	80 83       	st	Z, r24
	
	UCSR0C  &= ~(1<<USBS0);  // NUMBER OF STOP BITS IS 1
 2b2:	80 81       	ld	r24, Z
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	80 83       	st	Z, r24
	UCSR0C  &=~(1<<UCPOL0);  //RISING CLK- TRANSMITTING   FALLING CLK- RECEIVED;
 2b8:	80 81       	ld	r24, Z
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	80 83       	st	Z, r24
	
	
	UCSR0B |=(1<<TXCIE0);    //ENABLING TRANSMITTING INTERUPT
 2be:	8c 91       	ld	r24, X
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	8c 93       	st	X, r24
	UCSR0B |=(1<<RXCIE0);
 2c4:	8c 91       	ld	r24, X
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	8c 93       	st	X, r24
 2ca:	08 95       	ret

000002cc <_Z8fun_sendv>:
//UART WITHOUT BUFFER
#include "UART_no_buffer.h"
 using namespace std;
 
void fun_send(){
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	27 97       	sbiw	r28, 0x07	; 7
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t arr[7]={'S','H','R','E','Y','A','S'};
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	e0 e0       	ldi	r30, 0x00	; 0
 2e4:	f2 e0       	ldi	r31, 0x02	; 2
 2e6:	de 01       	movw	r26, r28
 2e8:	11 96       	adiw	r26, 0x01	; 1
 2ea:	01 90       	ld	r0, Z+
 2ec:	0d 92       	st	X+, r0
 2ee:	8a 95       	dec	r24
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <_Z8fun_sendv+0x1e>
		int i=0;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
	while(i<7)
 2f6:	27 30       	cpi	r18, 0x07	; 7
 2f8:	31 05       	cpc	r19, r1
 2fa:	84 f4       	brge	.+32     	; 0x31c <_Z8fun_sendv+0x50>
	{
		UDR0=arr[i];
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	80 81       	ld	r24, Z
 30a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		while(!(UCSR0A>>5 & 0x01));
 30e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 312:	85 ff       	sbrs	r24, 5
 314:	fc cf       	rjmp	.-8      	; 0x30e <_Z8fun_sendv+0x42>
		i++;
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 
void fun_send(){
	
	uint8_t arr[7]={'S','H','R','E','Y','A','S'};
		int i=0;
	while(i<7)
 31a:	ed cf       	rjmp	.-38     	; 0x2f6 <_Z8fun_sendv+0x2a>
		UDR0=arr[i];
		while(!(UCSR0A>>5 & 0x01));
		i++;
	}
	
}
 31c:	27 96       	adiw	r28, 0x07	; 7
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <_Z12fun_rec_sendv>:


void fun_rec_send() {
	
	uint8_t ab= UDR0;
 32e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	while(!(UCSR0A>>5 & 0x01));
 332:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 336:	85 ff       	sbrs	r24, 5
 338:	fc cf       	rjmp	.-8      	; 0x332 <_Z12fun_rec_sendv+0x4>
	UDR0=ab;
 33a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 33e:	08 95       	ret

00000340 <main>:
}


int main(void)
{   
	sei();  //enabling global interrupt
 340:	78 94       	sei
	
	initialize();
 342:	91 df       	rcall	.-222    	; 0x266 <_Z10initializev>
	attach_int_reciever(&fun_rec_send);
 344:	87 e9       	ldi	r24, 0x97	; 151
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	84 df       	rcall	.-248    	; 0x252 <_Z19attach_int_recieverPFvvE>
	attach_int_transmitter(&fun_send);
 34a:	86 e6       	ldi	r24, 0x66	; 102
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	86 df       	rcall	.-244    	; 0x25c <_Z22attach_int_transmitterPFvvE>
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0x10>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
