
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00800200  00800200  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddb  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c75  00000000  00000000  000011ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040a  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00002939  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	81 c0       	rjmp	.+258    	; 0x164 <__vector_24>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 36       	cpi	r26, 0x68	; 104
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	db d0       	rcall	.+438    	; 0x2bc <main>
 106:	ee c0       	rjmp	.+476    	; 0x2e4 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z15initialize_uartv>:

void initialize_uart(){
	int ubrr= (int)floor(((F_CPU /(16UL*(BAUD)))-1)); //formula to cal ubrr
	
	
	UBRR0L = ubrr & 0xff;  //ubrrl is first 8 lower bits of ubrr
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H =  (ubrr >> 8); //ubrrl is first 4 higher bit numbers of ubrr
 110:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	
	UCSR0A &=  ~(1<<U2X0);   //2x speed is not used
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); //ENABLING THE RECIEVER
 11e:	a1 ec       	ldi	r26, 0xC1	; 193
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	8c 91       	ld	r24, X
 124:	80 61       	ori	r24, 0x10	; 16
 126:	8c 93       	st	X, r24
	UCSR0B |= (1<<TXEN0);  //ENABLING THE TRANSMITTER
 128:	8c 91       	ld	r24, X
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	8c 93       	st	X, r24
	UCSR0C |=(1<<UCSZ01)|(1<<UCSZ00);    //NOTE: FIRST ZERO FROM LEFT REPRESENT THE UART NUMBER LIKE 0,1,2,3
 12e:	e2 ec       	ldi	r30, 0xC2	; 194
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	86 60       	ori	r24, 0x06	; 6
 136:	80 83       	st	Z, r24
	
	UCSR0B &= ~(1<<UCSZ02) ;  // 011 SET  8-bit mode
 138:	8c 91       	ld	r24, X
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	8c 93       	st	X, r24
	
	UCSR0C &= ~(1<<UMSEL01);    //  00 Setting it to asynchronous usart mode
 13e:	80 81       	ld	r24, Z
 140:	8f 77       	andi	r24, 0x7F	; 127
 142:	80 83       	st	Z, r24
	UCSR0C &=   ~(1<<UMSEL00);
 144:	80 81       	ld	r24, Z
 146:	8f 7b       	andi	r24, 0xBF	; 191
 148:	80 83       	st	Z, r24
	
	UCSR0C &= ~(1<<UPM01) ;
 14a:	80 81       	ld	r24, Z
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<UPM00);   // 00 MAKES THE PARITY DISABLED
 150:	80 81       	ld	r24, Z
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	80 83       	st	Z, r24
	
	UCSR0C  &= ~(1<<USBS0);  // NUMBER OF STOP BITS IS 1
 156:	80 81       	ld	r24, Z
 158:	87 7f       	andi	r24, 0xF7	; 247
 15a:	80 83       	st	Z, r24
	UCSR0C  &=~(1<<UCPOL0);  //RISING CLK- TRANSMITTING   FALLING CLK- RECEIVED;
 15c:	80 81       	ld	r24, Z
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <__vector_24>:
	
}

ISR(SPI_STC_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0b b6       	in	r0, 0x3b	; 59
 170:	0f 92       	push	r0
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	rec_arr[rj++] = SPDR;
 18a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 18e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 192:	ac 01       	movw	r20, r24
 194:	4f 5f       	subi	r20, 0xFF	; 255
 196:	5f 4f       	sbci	r21, 0xFF	; 255
 198:	50 93 01 02 	sts	0x0201, r21	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 19c:	40 93 00 02 	sts	0x0200, r20	; 0x800200 <__DATA_REGION_ORIGIN__>
 1a0:	2e b5       	in	r18, 0x2e	; 46
 1a2:	fc 01       	movw	r30, r24
 1a4:	ec 5f       	subi	r30, 0xFC	; 252
 1a6:	fd 4f       	sbci	r31, 0xFD	; 253
 1a8:	20 83       	st	Z, r18
	rj = rj%N;
 1aa:	9a 01       	movw	r18, r20
 1ac:	36 95       	lsr	r19
 1ae:	27 95       	ror	r18
 1b0:	36 95       	lsr	r19
 1b2:	27 95       	ror	r18
 1b4:	ab e7       	ldi	r26, 0x7B	; 123
 1b6:	b4 e1       	ldi	r27, 0x14	; 20
 1b8:	86 d0       	rcall	.+268    	; 0x2c6 <__umulhisi3>
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	64 e6       	ldi	r22, 0x64	; 100
 1c0:	68 9f       	mul	r22, r24
 1c2:	90 01       	movw	r18, r0
 1c4:	69 9f       	mul	r22, r25
 1c6:	30 0d       	add	r19, r0
 1c8:	11 24       	eor	r1, r1
 1ca:	ca 01       	movw	r24, r20
 1cc:	82 1b       	sub	r24, r18
 1ce:	93 0b       	sbc	r25, r19
 1d0:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	if(ri==rj){
 1d8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <ri>
 1dc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <ri+0x1>
 1e0:	82 17       	cp	r24, r18
 1e2:	93 07       	cpc	r25, r19
 1e4:	c1 f4       	brne	.+48     	; 0x216 <__vector_24+0xb2>
		ri++;
 1e6:	a9 01       	movw	r20, r18
 1e8:	4f 5f       	subi	r20, 0xFF	; 255
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
		ri=ri%N;
 1ec:	9a 01       	movw	r18, r20
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	67 d0       	rcall	.+206    	; 0x2c6 <__umulhisi3>
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	64 e6       	ldi	r22, 0x64	; 100
 1fe:	68 9f       	mul	r22, r24
 200:	90 01       	movw	r18, r0
 202:	69 9f       	mul	r22, r25
 204:	30 0d       	add	r19, r0
 206:	11 24       	eor	r1, r1
 208:	ca 01       	movw	r24, r20
 20a:	82 1b       	sub	r24, r18
 20c:	93 0b       	sbc	r25, r19
 20e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ri+0x1>
 212:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ri>
	}
	//read_buff();
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <_Z9SPI_setupv>:


void SPI_setup(){
	
	SPCR |=(1<<SPE); //ENABLING THE SPI
 23c:	8c b5       	in	r24, 0x2c	; 44
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	8c bd       	out	0x2c, r24	; 44
	//SPCR &= ~(1<<CPOL); //LEADING EDGE :RISING   TRAILINGEDGE :FALLING
	//SPCR &= ~(1<<CPHA);  // LEADING EDGE:SAMPLE    TRAILING EDGE:SETUP
	//	SPCR |= (1<<SPR0);  //SCK = Fosc/16 ;   //the master sets all this value
	
	DDRB &= ~(1<<PB3); //setting MISO AS INPUT
 242:	84 b1       	in	r24, 0x04	; 4
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	84 b9       	out	0x04, r24	; 4
	//DDRB &= ~(1<<PB0); //SS PIN IS SLAVE SELECT SETTING IT AS INPUT  ;//master selects it
	DDRB |=(1<<PB3); //setting pb3 ie miso as output
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	84 b9       	out	0x04, r24	; 4
	SPCR |=(1<<SPIE);//ENABLING INTERRUPT
 24e:	8c b5       	in	r24, 0x2c	; 44
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8c bd       	out	0x2c, r24	; 44
 254:	08 95       	ret

00000256 <_Z9read_buffv>:
}

void read_buff(){
	if(ri!=rj){
 256:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ri>
 25a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ri+0x1>
 25e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 262:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 266:	82 17       	cp	r24, r18
 268:	93 07       	cpc	r25, r19
 26a:	39 f1       	breq	.+78     	; 0x2ba <_Z9read_buffv+0x64>
	
	UDR0 = (uint8_t) rec_arr[ri];   //data
 26c:	fc 01       	movw	r30, r24
 26e:	ec 5f       	subi	r30, 0xFC	; 252
 270:	fd 4f       	sbci	r31, 0xFD	; 253
 272:	80 81       	ld	r24, Z
 274:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	while(!(UCSR0A>>5 & 0X01));
 278:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 27c:	85 ff       	sbrs	r24, 5
 27e:	fc cf       	rjmp	.-8      	; 0x278 <_Z9read_buffv+0x22>
	ri++;
 280:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <ri>
 284:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <ri+0x1>
 288:	4f 5f       	subi	r20, 0xFF	; 255
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
	ri=ri%N;
 28c:	9a 01       	movw	r18, r20
 28e:	36 95       	lsr	r19
 290:	27 95       	ror	r18
 292:	36 95       	lsr	r19
 294:	27 95       	ror	r18
 296:	ab e7       	ldi	r26, 0x7B	; 123
 298:	b4 e1       	ldi	r27, 0x14	; 20
 29a:	15 d0       	rcall	.+42     	; 0x2c6 <__umulhisi3>
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	64 e6       	ldi	r22, 0x64	; 100
 2a2:	68 9f       	mul	r22, r24
 2a4:	90 01       	movw	r18, r0
 2a6:	69 9f       	mul	r22, r25
 2a8:	30 0d       	add	r19, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	ca 01       	movw	r24, r20
 2ae:	82 1b       	sub	r24, r18
 2b0:	93 0b       	sbc	r25, r19
 2b2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ri+0x1>
 2b6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ri>
 2ba:	08 95       	ret

000002bc <main>:
//slave spi
#include "spi_slave_header.h"

int main(void) 
{
	sei();
 2bc:	78 94       	sei
	
	initialize_uart();
 2be:	25 df       	rcall	.-438    	; 0x10a <_Z15initialize_uartv>
	SPI_setup();
 2c0:	bd df       	rcall	.-134    	; 0x23c <_Z9SPI_setupv>
	/* Replace with your application code */
	while (1)
{
	read_buff();
 2c2:	c9 df       	rcall	.-110    	; 0x256 <_Z9read_buffv>
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <main+0x6>

000002c6 <__umulhisi3>:
 2c6:	a2 9f       	mul	r26, r18
 2c8:	b0 01       	movw	r22, r0
 2ca:	b3 9f       	mul	r27, r19
 2cc:	c0 01       	movw	r24, r0
 2ce:	a3 9f       	mul	r26, r19
 2d0:	70 0d       	add	r23, r0
 2d2:	81 1d       	adc	r24, r1
 2d4:	11 24       	eor	r1, r1
 2d6:	91 1d       	adc	r25, r1
 2d8:	b2 9f       	mul	r27, r18
 2da:	70 0d       	add	r23, r0
 2dc:	81 1d       	adc	r24, r1
 2de:	11 24       	eor	r1, r1
 2e0:	91 1d       	adc	r25, r1
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
