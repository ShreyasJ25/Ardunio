
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800200  000001da  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e97  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cca  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fa  00000000  00000000  00001ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000624  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002a52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ed       	ldi	r30, 0xDA	; 218
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 35       	cpi	r26, 0x52	; 82
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	5f d0       	rcall	.+190    	; 0x1ce <main>
 110:	62 c0       	rjmp	.+196    	; 0x1d6 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z9SPI_setupv>:
#include "spi_master_header.h"
void SPI_setup()
{
	
	SPCR |=(1<<SPE)|(1<<MSTR); //ENABLING THE SPI AND SETTING IT AS MASTER
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	80 65       	ori	r24, 0x50	; 80
 118:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<CPOL); //LEADING EDGE :RISING   TRAILINGEDGE :FALLING
 11a:	8c b5       	in	r24, 0x2c	; 44
 11c:	87 7f       	andi	r24, 0xF7	; 247
 11e:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<CPHA);  // LEADING EDGE:SAMPLE    TRAILING EDGE:SETUP
 120:	8c b5       	in	r24, 0x2c	; 44
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPR0);  //SCK = Fosc/16 ;
 126:	8c b5       	in	r24, 0x2c	; 44
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	8c bd       	out	0x2c, r24	; 44
	
	
	DDRB = 0x00;
 12c:	14 b8       	out	0x04, r1	; 4
	DDRB |=(1<<PB0);  //SETTING SS AS OUTPUT
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	81 60       	ori	r24, 0x01	; 1
 132:	84 b9       	out	0x04, r24	; 4
	DDRB |=(1<<PB1);  //SETTING SCK AS OUTPUT
 134:	84 b1       	in	r24, 0x04	; 4
 136:	82 60       	ori	r24, 0x02	; 2
 138:	84 b9       	out	0x04, r24	; 4
	DDRB |=(1<<PB2);
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	84 b9       	out	0x04, r24	; 4
	
	PORTB |=(1<<PB0); //SETTING SS HIGH AS IT SHOULD BE DISABLED
 140:	85 b1       	in	r24, 0x05	; 5
 142:	81 60       	ori	r24, 0x01	; 1
 144:	85 b9       	out	0x05, r24	; 5
 146:	08 95       	ret

00000148 <_Z12enable_slavev>:
}

void enable_slave(){
	PORTB &=~(1<<PB0);//enable the ss by pulling it to zero
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	08 95       	ret

00000150 <_Z9send_datav>:
#include "spi_master_header.h"
//master SPI



void send_data(){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	c1 55       	subi	r28, 0x51	; 81
 15a:	d1 09       	sbc	r29, r1
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61

	char  ab[]="data sending NO MORE THAN 50 CHARS WHY because i am not sure of why or whsy not\n";
 166:	81 e5       	ldi	r24, 0x51	; 81
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f2 e0       	ldi	r31, 0x02	; 2
 16c:	de 01       	movw	r26, r28
 16e:	11 96       	adiw	r26, 0x01	; 1
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	8a 95       	dec	r24
 176:	e1 f7       	brne	.-8      	; 0x170 <_Z9send_datav+0x20>
	int  num = sizeof(ab)/sizeof(char)-1;
			
	for(int i=0;i<num;i++)
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	80 35       	cpi	r24, 0x50	; 80
 17e:	91 05       	cpc	r25, r1
 180:	9c f4       	brge	.+38     	; 0x1a8 <_Z9send_datav+0x58>
	{
		SPDR = ab[i];
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ec 0f       	add	r30, r28
 188:	fd 1f       	adc	r31, r29
 18a:	e8 0f       	add	r30, r24
 18c:	f9 1f       	adc	r31, r25
 18e:	20 81       	ld	r18, Z
 190:	2e bd       	out	0x2e, r18	; 46
		while(!(SPSR & (1<<SPIF)));
 192:	0d b4       	in	r0, 0x2d	; 45
 194:	07 fe       	sbrs	r0, 7
 196:	fd cf       	rjmp	.-6      	; 0x192 <_Z9send_datav+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	ef e8       	ldi	r30, 0x8F	; 143
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <_Z9send_datav+0x4c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z9send_datav+0x52>
 1a2:	00 00       	nop
void send_data(){

	char  ab[]="data sending NO MORE THAN 50 CHARS WHY because i am not sure of why or whsy not\n";
	int  num = sizeof(ab)/sizeof(char)-1;
			
	for(int i=0;i<num;i++)
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	ea cf       	rjmp	.-44     	; 0x17c <_Z9send_datav+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	ff ef       	ldi	r31, 0xFF	; 255
 1aa:	23 ed       	ldi	r18, 0xD3	; 211
 1ac:	80 e3       	ldi	r24, 0x30	; 48
 1ae:	f1 50       	subi	r31, 0x01	; 1
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <_Z9send_datav+0x5e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z9send_datav+0x68>
 1b8:	00 00       	nop
			_delay_us(100)	; //for the sake of 9600baudrate used for c++ code written . not required for ardunio code
	}
	_delay_ms(1000);
		
	
}
 1ba:	cf 5a       	subi	r28, 0xAF	; 175
 1bc:	df 4f       	sbci	r29, 0xFF	; 255
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <main>:



int main(void)
{
	SPI_setup();
 1ce:	a2 df       	rcall	.-188    	; 0x114 <_Z9SPI_setupv>
	
	enable_slave();
 1d0:	bb df       	rcall	.-138    	; 0x148 <_Z12enable_slavev>
    /* Replace with your application code */
    while (1) 
    {
		send_data();
 1d2:	be df       	rcall	.-132    	; 0x150 <_Z9send_datav>
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <main+0x4>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
