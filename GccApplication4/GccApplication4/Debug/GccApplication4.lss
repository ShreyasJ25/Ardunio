
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000644  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800200  00800200  000006b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fac  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dab  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ca  00000000  00000000  0000250f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00002adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000691  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  00003495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003d7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	a4 c0       	rjmp	.+328    	; 0x14e <__vector_1>
   6:	00 00       	nop
   8:	cd c0       	rjmp	.+410    	; 0x1a4 <__vector_2>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__vector_3>
   e:	00 00       	nop
  10:	1f c1       	rjmp	.+574    	; 0x250 <__vector_4>
  12:	00 00       	nop
  14:	48 c1       	rjmp	.+656    	; 0x2a6 <__vector_5>
  16:	00 00       	nop
  18:	71 c1       	rjmp	.+738    	; 0x2fc <__vector_6>
  1a:	00 00       	nop
  1c:	9a c1       	rjmp	.+820    	; 0x352 <__vector_7>
  1e:	00 00       	nop
  20:	c3 c1       	rjmp	.+902    	; 0x3a8 <__vector_8>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ae 30       	cpi	r26, 0x0E	; 14
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	10 d0       	rcall	.+32     	; 0x126 <main>
 106:	9c c2       	rjmp	.+1336   	; 0x640 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_Z4fun1v>:
 */ 

#include "surveyaan_interrupt.h"
using namespace std;
void fun1(void ){
	DDRB |=0b10000000;
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	84 b9       	out	0x04, r24	; 4
	PORTB |=0b10000000;
 110:	85 b1       	in	r24, 0x05	; 5
 112:	80 68       	ori	r24, 0x80	; 128
 114:	85 b9       	out	0x05, r24	; 5
 116:	08 95       	ret

00000118 <_Z4fun0v>:
	
}

void fun0(void ){
	DDRB |=0b10000000;
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	84 b9       	out	0x04, r24	; 4
	PORTB &=~(1<<7);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	85 b9       	out	0x05, r24	; 5
 124:	08 95       	ret

00000126 <main>:
	
	sei(); // to do this  SREG |=(1<<7);  */



 attach_int(0,FALLING,&fun0);
 126:	4c e8       	ldi	r20, 0x8C	; 140
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	67 d1       	rcall	.+718    	; 0x3fe <_Z10attach_inthhPFvvE>
 attach_int(1,RISING,&fun1);
 130:	45 e8       	ldi	r20, 0x85	; 133
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	62 d1       	rcall	.+708    	; 0x3fe <_Z10attach_inthhPFvvE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x1a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x24>
 14a:	00 00       	nop
 14c:	f6 cf       	rjmp	.-20     	; 0x13a <main+0x14>

0000014e <__vector_1>:

void (*custom_INT[7])(void);
  //custom program passed by user to execute when INT0,INT1 ... INT7  occours; here used as shared variable
  
  
ISR(INT0_vect){
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	0b b6       	in	r0, 0x3b	; 59
 15a:	0f 92       	push	r0
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	(*custom_INT[0])();  //it can also be just    (* custom_INT0)();
 174:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 178:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 17c:	19 95       	eicall
	
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0b be       	out	0x3b, r0	; 59
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_2>:

ISR(INT1_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	0b b6       	in	r0, 0x3b	; 59
 1b0:	0f 92       	push	r0
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	custom_INT[1]();
 1ca:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 1ce:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 1d2:	19 95       	eicall
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_3>:
ISR(INT2_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	0b b6       	in	r0, 0x3b	; 59
 206:	0f 92       	push	r0
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	custom_INT[2]();
 220:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__DATA_REGION_ORIGIN__+0x4>
 224:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__DATA_REGION_ORIGIN__+0x5>
 228:	19 95       	eicall
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0b be       	out	0x3b, r0	; 59
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_4>:

ISR (INT3_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0b b6       	in	r0, 0x3b	; 59
 25c:	0f 92       	push	r0
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	custom_INT[3](); 
 276:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__DATA_REGION_ORIGIN__+0x6>
 27a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__DATA_REGION_ORIGIN__+0x7>
 27e:	19 95       	eicall
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_5>:

ISR (INT4_vect){
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	0b b6       	in	r0, 0x3b	; 59
 2b2:	0f 92       	push	r0
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	 custom_INT[4](); 
 2cc:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__DATA_REGION_ORIGIN__+0x8>
 2d0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__DATA_REGION_ORIGIN__+0x9>
 2d4:	19 95       	eicall
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0b be       	out	0x3b, r0	; 59
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_6>:
ISR (INT5_vect){
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	0b b6       	in	r0, 0x3b	; 59
 308:	0f 92       	push	r0
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	 custom_INT[5]();
 322:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__DATA_REGION_ORIGIN__+0xa>
 326:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__DATA_REGION_ORIGIN__+0xb>
 32a:	19 95       	eicall
}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0b be       	out	0x3b, r0	; 59
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_7>:
ISR (INT6_vect){
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	0b b6       	in	r0, 0x3b	; 59
 35e:	0f 92       	push	r0
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	 custom_INT[6]();
 378:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__DATA_REGION_ORIGIN__+0xc>
 37c:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__DATA_REGION_ORIGIN__+0xd>
 380:	19 95       	eicall
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0b be       	out	0x3b, r0	; 59
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_8>:
ISR (INT7_vect){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	0b b6       	in	r0, 0x3b	; 59
 3b4:	0f 92       	push	r0
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	custom_INT[7]();
 3ce:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__bss_end>
 3d2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__bss_end+0x1>
 3d6:	19 95       	eicall
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	bf 91       	pop	r27
 3de:	af 91       	pop	r26
 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	7f 91       	pop	r23
 3e6:	6f 91       	pop	r22
 3e8:	5f 91       	pop	r21
 3ea:	4f 91       	pop	r20
 3ec:	3f 91       	pop	r19
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0b be       	out	0x3b, r0	; 59
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <_Z10attach_inthhPFvvE>:
void attach_int(uint8_t number, uint8_t typ, void (* funct)()){
	//interrupt number 0 to 7 which stands for INT0,INT1....INT7
	//interrupt type  RISING,FALLING,
	
	
	custom_INT[number]= funct;
 3fe:	e8 2f       	mov	r30, r24
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	e0 50       	subi	r30, 0x00	; 0
 408:	fe 4f       	sbci	r31, 0xFE	; 254
 40a:	51 83       	std	Z+1, r21	; 0x01
 40c:	40 83       	st	Z, r20
	
	cli(); //include function to disable SREG
 40e:	f8 94       	cli
	
	
	if(number <=3){
 410:	84 30       	cpi	r24, 0x04	; 4
 412:	68 f4       	brcc	.+26     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		DDRD &=~(1<<number);  //setting the interrupt pin as input INT0 corresponds to PD0,INT1 corresponds to PD1
 414:	9a b1       	in	r25, 0x0a	; 10
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	08 2e       	mov	r0, r24
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	20 95       	com	r18
 428:	29 23       	and	r18, r25
 42a:	2a b9       	out	0x0a, r18	; 10
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	}
	else{
		DDRE &=~(1<<number); //INT4 is connected to PE4 ...and INT7 is connected to PE7
 42e:	9d b1       	in	r25, 0x0d	; 13
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	08 2e       	mov	r0, r24
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	22 0f       	add	r18, r18
 43a:	33 1f       	adc	r19, r19
 43c:	0a 94       	dec	r0
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	20 95       	com	r18
 442:	29 23       	and	r18, r25
 444:	2d b9       	out	0x0d, r18	; 13
	}
	
	EIMSK |=1<<number;  //enabling the interrupt
 446:	9d b3       	in	r25, 0x1d	; 29
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	08 2e       	mov	r0, r24
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	22 0f       	add	r18, r18
 452:	33 1f       	adc	r19, r19
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	29 2b       	or	r18, r25
 45a:	2d bb       	out	0x1d, r18	; 29
	
	if(number <=3)
 45c:	84 30       	cpi	r24, 0x04	; 4
 45e:	08 f0       	brcs	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	77 c0       	rjmp	.+238    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	{   // number corresponds to INT0 to INT3)
		int num =number%4;
 462:	83 70       	andi	r24, 0x03	; 3
 464:	90 e0       	ldi	r25, 0x00	; 0
		switch(typ){
 466:	61 30       	cpi	r22, 0x01	; 1
 468:	e1 f0       	breq	.+56     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 46a:	18 f0       	brcs	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46c:	62 30       	cpi	r22, 0x02	; 2
 46e:	b1 f1       	breq	.+108    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 470:	52 c0       	rjmp	.+164    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			case (RISING):
			EICRA |=((1<<(2*num)) |(1<<(2*num+1)));
 472:	e9 e6       	ldi	r30, 0x69	; 105
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	40 81       	ld	r20, Z
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	b9 01       	movw	r22, r18
 482:	08 2e       	mov	r0, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	8a 95       	dec	r24
 498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 49a:	26 2b       	or	r18, r22
 49c:	24 2b       	or	r18, r20
 49e:	20 83       	st	Z, r18
			break;
 4a0:	cd c0       	rjmp	.+410    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			case(FALLING):
			EICRA |=(1<<(2*num+1));
 4a2:	e9 e6       	ldi	r30, 0x69	; 105
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	60 81       	ld	r22, Z
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	ac 01       	movw	r20, r24
 4ae:	4f 5f       	subi	r20, 0xFF	; 255
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	d9 01       	movw	r26, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	aa 0f       	add	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	4a 95       	dec	r20
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4c2:	ad 01       	movw	r20, r26
 4c4:	46 2b       	or	r20, r22
 4c6:	40 83       	st	Z, r20
			EICRA &= ~(1<<(2*num));
 4c8:	90 81       	ld	r25, Z
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	20 95       	com	r18
 4d6:	29 23       	and	r18, r25
 4d8:	20 83       	st	Z, r18
			break;
 4da:	b0 c0       	rjmp	.+352    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			case(LOW):
			EICRA &= ~(1<<(2*num));
 4dc:	e9 e6       	ldi	r30, 0x69	; 105
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	50 81       	ld	r21, Z
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	b9 01       	movw	r22, r18
 4ec:	08 2e       	mov	r0, r24
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4f8:	46 2f       	mov	r20, r22
 4fa:	40 95       	com	r20
 4fc:	45 23       	and	r20, r21
 4fe:	40 83       	st	Z, r20
			EICRA &= ~(1<<(2*num+1));
 500:	40 81       	ld	r20, Z
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	02 c0       	rjmp	.+4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 50e:	20 95       	com	r18
 510:	24 23       	and	r18, r20
 512:	20 83       	st	Z, r18
			break;
 514:	93 c0       	rjmp	.+294    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			default:
			EICRA &= ~(1<<(2*num+1));
 516:	e9 e6       	ldi	r30, 0x69	; 105
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	40 81       	ld	r20, Z
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	bc 01       	movw	r22, r24
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	d9 01       	movw	r26, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52e:	aa 0f       	add	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 536:	9a 2f       	mov	r25, r26
 538:	90 95       	com	r25
 53a:	94 23       	and	r25, r20
 53c:	90 83       	st	Z, r25
			EICRA |= (1<<(2*num));
 53e:	90 81       	ld	r25, Z
 540:	02 c0       	rjmp	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 54a:	29 2b       	or	r18, r25
 54c:	20 83       	st	Z, r18
			break;
 54e:	76 c0       	rjmp	.+236    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
		}
	}
	
	else{
		int num =number%4;
 550:	83 70       	andi	r24, 0x03	; 3
 552:	90 e0       	ldi	r25, 0x00	; 0
		switch(typ){
 554:	61 30       	cpi	r22, 0x01	; 1
 556:	e1 f0       	breq	.+56     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 558:	18 f0       	brcs	.+6      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55a:	62 30       	cpi	r22, 0x02	; 2
 55c:	b1 f1       	breq	.+108    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 55e:	52 c0       	rjmp	.+164    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
			case (RISING):
			EICRB |=((1<<(2*num)) |(1<<(2*num+1)));
 560:	ea e6       	ldi	r30, 0x6A	; 106
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	40 81       	ld	r20, Z
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	21 e0       	ldi	r18, 0x01	; 1
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	b9 01       	movw	r22, r18
 570:	08 2e       	mov	r0, r24
 572:	02 c0       	rjmp	.+4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 588:	26 2b       	or	r18, r22
 58a:	24 2b       	or	r18, r20
 58c:	20 83       	st	Z, r18
			break;
 58e:	56 c0       	rjmp	.+172    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			case(FALLING):
			EICRB |=(1<<(2*num+1));
 590:	ea e6       	ldi	r30, 0x6A	; 106
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	60 81       	ld	r22, Z
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	ac 01       	movw	r20, r24
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	d9 01       	movw	r26, r18
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5a8:	aa 0f       	add	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	4a 95       	dec	r20
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 5b0:	ad 01       	movw	r20, r26
 5b2:	46 2b       	or	r20, r22
 5b4:	40 83       	st	Z, r20
			EICRB &= ~(1<<(2*num));
 5b6:	90 81       	ld	r25, Z
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	8a 95       	dec	r24
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5c2:	20 95       	com	r18
 5c4:	29 23       	and	r18, r25
 5c6:	20 83       	st	Z, r18
			break;
 5c8:	39 c0       	rjmp	.+114    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			case(LOW):
			EICRB &= ~(1<<(2*num));
 5ca:	ea e6       	ldi	r30, 0x6A	; 106
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	50 81       	ld	r21, Z
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	08 2e       	mov	r0, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5e6:	46 2f       	mov	r20, r22
 5e8:	40 95       	com	r20
 5ea:	45 23       	and	r20, r21
 5ec:	40 83       	st	Z, r20
			EICRB &= ~(1<<(2*num+1));
 5ee:	40 81       	ld	r20, Z
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	8a 95       	dec	r24
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5fc:	20 95       	com	r18
 5fe:	24 23       	and	r18, r20
 600:	20 83       	st	Z, r18
			break;
 602:	1c c0       	rjmp	.+56     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			default:
			EICRB &= ~(1<<(2*num+1));
 604:	ea e6       	ldi	r30, 0x6A	; 106
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	40 81       	ld	r20, Z
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	bc 01       	movw	r22, r24
 610:	6f 5f       	subi	r22, 0xFF	; 255
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	d9 01       	movw	r26, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 61c:	aa 0f       	add	r26, r26
 61e:	bb 1f       	adc	r27, r27
 620:	6a 95       	dec	r22
 622:	e2 f7       	brpl	.-8      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 624:	9a 2f       	mov	r25, r26
 626:	90 95       	com	r25
 628:	94 23       	and	r25, r20
 62a:	90 83       	st	Z, r25
			EICRB |= (1<<(2*num));
 62c:	90 81       	ld	r25, Z
 62e:	02 c0       	rjmp	.+4      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 630:	22 0f       	add	r18, r18
 632:	33 1f       	adc	r19, r19
 634:	8a 95       	dec	r24
 636:	e2 f7       	brpl	.-8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 638:	29 2b       	or	r18, r25
 63a:	20 83       	st	Z, r18
			break;
		}
	}
	
	sei();  // to make SREG  7th bit to 1
 63c:	78 94       	sei
 63e:	08 95       	ret

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
