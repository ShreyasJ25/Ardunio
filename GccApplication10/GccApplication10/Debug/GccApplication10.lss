
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000252  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef9  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d47  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004de  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065a  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019d  00000000  00000000  00002bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002d67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e5       	ldi	r30, 0x52	; 82
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 32       	cpi	r26, 0x20	; 32
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	7c d0       	rcall	.+248    	; 0x208 <main>
 110:	9e c0       	rjmp	.+316    	; 0x24e <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z8i2c_initv>:


		

		void i2c_init(){
			TWBR |=(1<<2); //value is 4;//this is bit rate register
 114:	e8 eb       	ldi	r30, 0xB8	; 184
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 83       	st	Z, r24
			TWSR &=~(1<<1);
 11e:	e9 eb       	ldi	r30, 0xB9	; 185
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	80 83       	st	Z, r24
			TWSR &=~(1<<0); //setting pre-scaler value to 00 i.e 1  //here  0.66Mhz
 128:	80 81       	ld	r24, Z
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <_Z9i2c_starth>:

	

		uint8_t i2c_start(uint8_t address){
			
			TWCR |=(1<<TWINT)|(1<<TWSTA)|(1<< TWEN); //ENABLING START CONDITION
 130:	ec eb       	ldi	r30, 0xBC	; 188
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	94 6a       	ori	r25, 0xA4	; 164
 138:	90 83       	st	Z, r25
			uint8_t status = 0;
			while(!(TWCR&(1<<TWINT))); //wait for TWINT to set
 13a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 13e:	99 23       	and	r25, r25
 140:	e4 f7       	brge	.-8      	; 0x13a <_Z9i2c_starth+0xa>
			status =TWSR & 0xf8;
 142:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 146:	98 7f       	andi	r25, 0xF8	; 248
			// Serial.print("status 1:");
			// Serial.println(status,HEX);
			if(status != 0x08)return 0;
 148:	98 30       	cpi	r25, 0x08	; 8
 14a:	c1 f4       	brne	.+48     	; 0x17c <_Z9i2c_starth+0x4c>
			TWDR = (address<<1);
 14c:	88 0f       	add	r24, r24
 14e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
			TWCR |=(1<<TWINT)|(1<<TWEN); //address can only be written when TWINT is 1
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	84 68       	ori	r24, 0x84	; 132
 15a:	80 83       	st	Z, r24
			TWCR &=~(1<<TWSTA);  // we are stopping start bit otherwise repeated start would be called
 15c:	80 81       	ld	r24, Z
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	80 83       	st	Z, r24
			while(!(TWCR&(1<<TWINT))); //wait for TWINT to set
 162:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 166:	88 23       	and	r24, r24
 168:	e4 f7       	brge	.-8      	; 0x162 <_Z9i2c_starth+0x32>
			status =TWSR & 0xf8;
 16a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 16e:	88 7f       	andi	r24, 0xF8	; 248
			// Serial.print("status 2:");
			// Serial.println(status,HEX);
			if(status==0x18)return 1; //SLA+W has been transmitted, ACK has been received
 170:	88 31       	cpi	r24, 0x18	; 24
 172:	31 f0       	breq	.+12     	; 0x180 <_Z9i2c_starth+0x50>
			else if(status ==0x20)return 2; //SLA +W has been transmitted , ACK not received
 174:	80 32       	cpi	r24, 0x20	; 32
 176:	31 f4       	brne	.+12     	; 0x184 <_Z9i2c_starth+0x54>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	08 95       	ret
			uint8_t status = 0;
			while(!(TWCR&(1<<TWINT))); //wait for TWINT to set
			status =TWSR & 0xf8;
			// Serial.print("status 1:");
			// Serial.println(status,HEX);
			if(status != 0x08)return 0;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
			TWCR &=~(1<<TWSTA);  // we are stopping start bit otherwise repeated start would be called
			while(!(TWCR&(1<<TWINT))); //wait for TWINT to set
			status =TWSR & 0xf8;
			// Serial.print("status 2:");
			// Serial.println(status,HEX);
			if(status==0x18)return 1; //SLA+W has been transmitted, ACK has been received
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
			else if(status ==0x20)return 2; //SLA +W has been transmitted , ACK not received
			else return 3 ; //arbitration lost in SLA+W or data bytes
 184:	83 e0       	ldi	r24, 0x03	; 3
			
		}
 186:	08 95       	ret

00000188 <_Z9i2c_writeh>:
		uint8_t i2c_write (uint8_t data){
			
			uint8_t status;
			TWDR = data;
 188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
			TWCR |=(1<<TWINT)|(1<<TWEN); //address can only be written when TWINT is 1
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	84 68       	ori	r24, 0x84	; 132
 194:	80 83       	st	Z, r24
			
			while(!(TWCR&(1<<TWINT))); //wait for TWINT to set
 196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 19a:	88 23       	and	r24, r24
 19c:	e4 f7       	brge	.-8      	; 0x196 <_Z9i2c_writeh+0xe>
			status =TWSR & 0xf8;
 19e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1a2:	88 7f       	andi	r24, 0xF8	; 248
			// Serial.print("status 3:");
			//Serial.println(status,HEX);
			if(status == 0x28)return 1; // data has been transmitted and ACK is received
 1a4:	88 32       	cpi	r24, 0x28	; 40
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <_Z9i2c_writeh+0x28>
			else if(status ==0x30)return 2; //data transmitted but ACK not received
 1a8:	80 33       	cpi	r24, 0x30	; 48
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <_Z9i2c_writeh+0x2c>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	08 95       	ret
			
			while(!(TWCR&(1<<TWINT))); //wait for TWINT to set
			status =TWSR & 0xf8;
			// Serial.print("status 3:");
			//Serial.println(status,HEX);
			if(status == 0x28)return 1; // data has been transmitted and ACK is received
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	08 95       	ret
			else if(status ==0x30)return 2; //data transmitted but ACK not received
			else return 3; //arbitration lost in SLA+W or data bytes
 1b4:	83 e0       	ldi	r24, 0x03	; 3
			
		}
 1b6:	08 95       	ret

000001b8 <_Z8i2c_stopv>:
		void i2c_stop(){
			
			TWCR |=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	84 69       	ori	r24, 0x94	; 148
 1c0:	80 83       	st	Z, r24
			while(!(TWCR &(1<<TWSTO)));
 1c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1c6:	84 ff       	sbrs	r24, 4
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <_Z8i2c_stopv+0xa>
		}
 1ca:	08 95       	ret

000001cc <_Z9data_sendPhi>:

void data_send(uint8_t arr[],int num){
 1cc:	7c 01       	movw	r14, r24
 1ce:	8b 01       	movw	r16, r22
	//uint8_t arr[]=ar;
	//int num = sizeof(arr)/sizeof(arr[0]) -1;
	i2c_init();
 1d0:	a1 df       	rcall	.-190    	; 0x114 <_Z8i2c_initv>
	uint8_t status;
	while (1){
		status= i2c_start((uint8_t)(8));
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	ad df       	rcall	.-166    	; 0x130 <_Z9i2c_starth>
		if(status ==1){
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	61 f4       	brne	.+24     	; 0x1f2 <_Z9data_sendPhi+0x26>
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i=0;i<(num);i++){
 1de:	c0 17       	cp	r28, r16
 1e0:	d1 07       	cpc	r29, r17
 1e2:	3c f4       	brge	.+14     	; 0x1f2 <_Z9data_sendPhi+0x26>
				status = i2c_write(arr[i]);
 1e4:	f7 01       	movw	r30, r14
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	80 81       	ld	r24, Z
 1ec:	cd df       	rcall	.-102    	; 0x188 <_Z9i2c_writeh>
	i2c_init();
	uint8_t status;
	while (1){
		status= i2c_start((uint8_t)(8));
		if(status ==1){
			for(int i=0;i<(num);i++){
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	f6 cf       	rjmp	.-20     	; 0x1de <_Z9data_sendPhi+0x12>
				status = i2c_write(arr[i]);
}
	}
		i2c_stop();
 1f2:	e2 df       	rcall	.-60     	; 0x1b8 <_Z8i2c_stopv>
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	87 ea       	ldi	r24, 0xA7	; 167
 1f8:	91 e6       	ldi	r25, 0x61	; 97
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <_Z9data_sendPhi+0x2e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <_Z9data_sendPhi+0x38>
 204:	00 00       	nop
 206:	e5 cf       	rjmp	.-54     	; 0x1d2 <_Z9data_sendPhi+0x6>

00000208 <main>:
 208:	cf 93       	push	r28
		
		#include "i2c_master_header.h"
	
	 // normal transmission without repeated START;
		int main(void)
		{
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	a0 97       	sbiw	r28, 0x20	; 32
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
		uint8_t arr[]="data sending but not receiving\n";
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	e0 e0       	ldi	r30, 0x00	; 0
 220:	f2 e0       	ldi	r31, 0x02	; 2
 222:	de 01       	movw	r26, r28
 224:	11 96       	adiw	r26, 0x01	; 1
 226:	01 90       	ld	r0, Z+
 228:	0d 92       	st	X+, r0
 22a:	8a 95       	dec	r24
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x1e>
		int num =sizeof(arr)/sizeof(uint8_t);
		 data_send(arr,num);
 22e:	60 e2       	ldi	r22, 0x20	; 32
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	ca df       	rcall	.-108    	; 0x1cc <_Z9data_sendPhi>

			
		 return 0;
		  }
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	a0 96       	adiw	r28, 0x20	; 32
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
