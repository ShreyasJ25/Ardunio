
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8a  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c6e  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040a  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f6  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c0       	rjmp	.+216    	; 0x136 <__vector_23>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2e d0       	rcall	.+92     	; 0x152 <main>
  f6:	3f c0       	rjmp	.+126    	; 0x176 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z16initialize_timerv>:
#include  "timer0_header.h"

void initialize_timer(){
	
	TCCR0A |= (1<<WGM00);
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
 100:	84 b5       	in	r24, 0x24	; 36
 102:	82 60       	ori	r24, 0x02	; 2
 104:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<WGM02);  //SETTING TO FAST PWM
 106:	85 b5       	in	r24, 0x25	; 37
 108:	87 7f       	andi	r24, 0xF7	; 247
 10a:	85 bd       	out	0x25, r24	; 37
	
	TCCR0B |=(1<<CS00);
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=(1<<CS02); //MAKING FREQUENCY DIVIDE BY 1024 TIMES i.e 15,625 Hz
 112:	85 b5       	in	r24, 0x25	; 37
 114:	84 60       	ori	r24, 0x04	; 4
 116:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = (uint8_t )250; //this is the value TCNT0 get compared to
 118:	8a ef       	ldi	r24, 0xFA	; 250
 11a:	87 bd       	out	0x27, r24	; 39
	TCCR0A |=(1<<COM0A1);
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	84 bd       	out	0x24, r24	; 36
	TCCR0A &=~(1<<COM0A0);  //  INVERTING MODE
 122:	84 b5       	in	r24, 0x24	; 36
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	84 bd       	out	0x24, r24	; 36
	
	DDRB |=(1<<PB7); //OCOA IS PB7 i.e 13th pin ;you need to set it as out put
 128:	84 b1       	in	r24, 0x04	; 4
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	84 b9       	out	0x04, r24	; 4
	
	//TIMSK0=(1<<OCIE0A);//enabling the interrupt when value in OCRA is equaled
	TIMSK0 =(1<<TOIE0); //enabling overflow interrupt
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 134:	08 95       	ret

00000136 <__vector_23>:
	//TCNT0 =0x00;
	//DDRB |=(1<<PB7); //setting internal led as output
}


ISR(TIMER0_OVF_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	//PORTB |=(1<<PB7);
	OCR0A = 64;  //setting value to 64 everytime overflow happens so a same pwm wave is transmitted that has 25% duty cycle
 142:	80 e4       	ldi	r24, 0x40	; 64
 144:	87 bd       	out	0x27, r24	; 39
	//count++;
	//count=count%4;
}
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:



int main()
{
	DDRB |=(1<<PB7);
 152:	84 b1       	in	r24, 0x04	; 4
 154:	80 68       	ori	r24, 0x80	; 128
 156:	84 b9       	out	0x04, r24	; 4
	PORTB |=(1<<PB7);
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	80 68       	ori	r24, 0x80	; 128
 15c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	8b e7       	ldi	r24, 0x7B	; 123
 162:	92 e9       	ldi	r25, 0x92	; 146
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x12>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x1c>
 16e:	00 00       	nop
	_delay_ms(3000);
	sei();    //enabling global interrupt i.e SREG
 170:	78 94       	sei
	initialize_timer();
 172:	c3 df       	rcall	.-122    	; 0xfa <_Z16initialize_timerv>
 174:	ff cf       	rjmp	.-2      	; 0x174 <main+0x22>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
