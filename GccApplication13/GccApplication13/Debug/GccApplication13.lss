
GccApplication13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb0  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d4f  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000537  00000000  00000000  0000205b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000074a  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  00002dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002fd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	9f c0       	rjmp	.+318    	; 0x144 <__vector_1>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	89 d0       	rcall	.+274    	; 0x208 <main>
  f6:	8d c0       	rjmp	.+282    	; 0x212 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z22intialize_power_savingv>:
	_delay_ms(2000);
	//delay_ms(5000);
}

void intialize_power_saving(){
	SMCR &=~(1<<SM0);
  fa:	83 b7       	in	r24, 0x33	; 51
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	83 bf       	out	0x33, r24	; 51
	SMCR |=(1<<SM1);
 100:	83 b7       	in	r24, 0x33	; 51
 102:	84 60       	ori	r24, 0x04	; 4
 104:	83 bf       	out	0x33, r24	; 51
	SMCR |=  (1<<SM2);
 106:	83 b7       	in	r24, 0x33	; 51
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	83 bf       	out	0x33, r24	; 51
 10c:	08 95       	ret

0000010e <_Z18enter_power_savingv>:
	
	//CSRA |= (1 << ADEN);//switching of adc
}
void enter_power_saving(){
	SMCR |=(1<<SE);
 10e:	83 b7       	in	r24, 0x33	; 51
 110:	81 60       	ori	r24, 0x01	; 1
 112:	83 bf       	out	0x33, r24	; 51
 114:	08 95       	ret

00000116 <_Z19intialize_interruptv>:
}
void intialize_interrupt(){
	EIMSK |=(1<<INT0);
 116:	8d b3       	in	r24, 0x1d	; 29
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	8d bb       	out	0x1d, r24	; 29
	EICRA |=(1<<ISC00);
 11c:	e9 e6       	ldi	r30, 0x69	; 105
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
	EICRA |=(1<<ISC01);
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
	DDRD &=~(1<<PD0);
 12c:	8a b1       	in	r24, 0x0a	; 10
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	8a b9       	out	0x0a, r24	; 10
 132:	08 95       	ret

00000134 <_Z16detach_interruptv>:
}
void detach_interrupt(){
	EIMSK &=~(1<<INT0);
 134:	8d b3       	in	r24, 0x1d	; 29
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	8d bb       	out	0x1d, r24	; 29
 13a:	08 95       	ret

0000013c <_Z17enter_normal_modev>:
}
void enter_normal_mode(){
	SMCR &=~(1<<SE);
 13c:	83 b7       	in	r24, 0x33	; 51
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	83 bf       	out	0x33, r24	; 51
 142:	08 95       	ret

00000144 <__vector_1>:
#include "power_saving_header.h"

void enter_normal_mode();

ISR (INT0_vect){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	0b b6       	in	r0, 0x3b	; 59
 150:	0f 92       	push	r0
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	enter_normal_mode();
 16a:	e8 df       	rcall	.-48     	; 0x13c <_Z17enter_normal_modev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	87 ea       	ldi	r24, 0xA7	; 167
 170:	91 e6       	ldi	r25, 0x61	; 97
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <__vector_1+0x2e>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <__vector_1+0x38>
 17c:	00 00       	nop
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	87 ea       	ldi	r24, 0xA7	; 167
 182:	91 e6       	ldi	r25, 0x61	; 97
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <__vector_1+0x40>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__vector_1+0x4a>
 18e:	00 00       	nop
	//PORTB |=(1<<PB7);
	_delay_ms(2000);
	// PORTB &=~(1<<PB7);
	_delay_ms(2000);
	//delay_ms(5000);
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_Z30initialize_necessary_interruptv>:
void enter_normal_mode(){
	SMCR &=~(1<<SE);
}

void initialize_necessary_interrupt(){
	sei();
 1b6:	78 94       	sei
	intialize_interrupt();
 1b8:	ae cf       	rjmp	.-164    	; 0x116 <_Z19intialize_interruptv>
 1ba:	08 95       	ret

000001bc <_Z26initialize_necessary_sleepv>:
}

void initialize_necessary_sleep(){
	intialize_power_saving();
 1bc:	9e df       	rcall	.-196    	; 0xfa <_Z22intialize_power_savingv>
	enter_power_saving();
 1be:	a7 df       	rcall	.-178    	; 0x10e <_Z18enter_power_savingv>
 1c0:	83 b7       	in	r24, 0x33	; 51
	sleep_mode(); // this function is inbuilt function of sleep.h which initializes a bunch of assembly code that enables sleep
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	83 bf       	out	0x33, r24	; 51
 1c6:	88 95       	sleep
 1c8:	83 b7       	in	r24, 0x33	; 51
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	83 bf       	out	0x33, r24	; 51
 1ce:	08 95       	ret

000001d0 <_Z11after_sleepv>:
 1d0:	84 b1       	in	r24, 0x04	; 4
 that and this process keeps repeating in a loop
 
 
 */
void after_sleep(){
	DDRB |=(1<<PB7);
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	84 b9       	out	0x04, r24	; 4
	PORTB |=(1<<PB7);  //blinking led on off
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	87 ea       	ldi	r24, 0xA7	; 167
 1e0:	91 e6       	ldi	r25, 0x61	; 97
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <_Z11after_sleepv+0x12>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z11after_sleepv+0x1c>
 1ec:	00 00       	nop
	_delay_ms(2000);
	PORTB &=~(1<<PB7);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8f 77       	andi	r24, 0x7F	; 127
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	87 ea       	ldi	r24, 0xA7	; 167
 1f8:	91 e6       	ldi	r25, 0x61	; 97
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <_Z11after_sleepv+0x2a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <_Z11after_sleepv+0x34>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <main>:
{ 
	
    
    while (1)   
    {  
		initialize_necessary_interrupt();
 208:	d6 df       	rcall	.-84     	; 0x1b6 <_Z30initialize_necessary_interruptv>
		
		initialize_necessary_sleep();
 20a:	d8 df       	rcall	.-80     	; 0x1bc <_Z26initialize_necessary_sleepv>
		
		after_sleep();
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <_Z11after_sleepv>
 20e:	92 df       	rcall	.-220    	; 0x134 <_Z16detach_interruptv>

		
		detach_interrupt();  
 210:	fb cf       	rjmp	.-10     	; 0x208 <main>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
